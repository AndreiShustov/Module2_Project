# Домашняя работа по уроку "Цикл for. Элементы списка. Полезные функции в цикле"
# Ваша задача:
# Цель: закрепить навык решения задач при помощи цикла for, применив знания об основных типах данных.
# Задача "Всё не так уж просто":
# Дан список чисел numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
#
# Используя этот список составьте второй список primes содержащий только простые числа.
# А так же третий список not_primes, содержащий все не простые числа.
# Выведите списки primes и not_primes на экран(в консоль).
#
# Пункты задачи:
#
# Создайте пустые списки primes и not_primes.
# При помощи цикла for переберите список numbers.
# Напишите ещё один цикл for (вложенный), где будут подбираться делители для числа из 1ого цикла.
# Отметить простоту числа можно переменной is_prime, записав в неё значение True перед проверкой.
# В процессе проверки на простоту записывайте числа из списка numbers в списки primes и not_primes
# в зависимости от значения переменной is_prime после проверки (True - в prime, False - в not_prime).
# Выведите списки primes и not_primes на экран(в консоль).
# Простое число — натуральное число, имеющее ровно два различных натуральных делителя: единицу и само это число.
# Примеры простых чисел: 2, 3, 5, 7, 11, 13, 17, 19.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes = list()
not_primes = list()

for i in numbers:
    if i == 1:  # число 1 является ни простым, ни составным числом, поэтому его пропускаем.
        continue
    is_prime = True
    if i < 2:
        is_prime = False
    else:
        for j in range(2, (i // 2) + 1):
            if i % j == 0:
                is_prime = False

    if is_prime:
        primes.append(i)
    else:
        not_primes.append(i)

print('Numbers:', numbers)
print('Primes:', primes)
print('Not Primes:', not_primes)
